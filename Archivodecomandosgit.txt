CONFIGURACION
----------------------------------------------------------------------
Una vez instalado git, debes configurar lo siguiente:

1. git config --global user.name "ddriverahn"
2. git config --global user.email "ddriverahn@ggg.com"

Generando tú public Key:
1. ssh-keygen

Leer dicha llave para copiarla en GitHub
1. cat ~/.ssh/id_rsa.pub 

----------------------------------------------------------------------
PROCESOS EN GITHUB
----------------------------------------------------------------------

Clonar un proyecto
1. Crear mkdir <nombredeproyecto>)
2. git init para instanciar el repositorio
3. git remote add origin <Urldecuentagit>(sincronizar local-remote)
4. git pull origin master(se empieza a descargar) ó git push origin master (para subir el proyecto a cuenta de git)

Eliminar el sincronizar local-remote
1. git remote remove origin

Crear un archivo
1. touch <nombrearchivo> + extensión
2. git add<nombrearchivo> o git add .
3. git commit -m <"Descripcion del cambio entre comillas">
4. git push origin <nombredelarama>

Eliminar un archivo
1. git rm <nombrearchivo> ó caprpeta git rm -r <nombrecarpeta>
2. git commit -m <"Descripcion del cambio entre comillas">
3. git push origin <nombredelarama>


Creacion de Rama 
(1forma)
1. git branch <nombredelarama>
2. git checkout <nombreramacreada>
3. git push origin <nombredelarama> (agregar una rama a la cuenta git)

(2forma)
1. git branch <nombredelarama>

Enviar cambios de rama a cuenta de GitGub
1. git add -A
2. git commit -m <"mensajedecambio">
2. git push origin master

Moverte a una rama a otra
1. git checkout -b <nombredelarama>

Borrar una rama local
1. git checkout master
2. git branch -D <nombredelarama>

Borrar una rama de cuenta git
1. git checkout master
2. git push origin :<nombredelarama>

Fusionar una rama a la rama master
1. git checkout master
2. git merge <nombredelarama>
3 git push origin master (para que los cambios afecten a la cuenta de git)

Corregir un mensaje en commit ya ejecutado
1. git commit --amend -m <"mensage">
2. git push origin master -f (fuerza a que suban los cambios del comentario)

Crear Tags anotadas
1. git tag -a <versión(1.0,1.1,1.2 etc)> -m <"mensaje"> (estas son más recomendadas)

Crear Tags ligeras
1. git tag <versión(1.0,1.1,1.2 etc)>

Crear Tag a commit ya realizado
1. git tag -a <versión(1.0,1.1,1.2 etc)> -m <"mensaje"> <codigo sha del commit>
2. git push origin <versión(1.0,1.1,1.2 etc)> ó todas de un solo git push origin --tags

Proceso de fusión con cambios en la misma linea
 de código
1. git fetch origin
2. borramos el codigo manualmente
3. git add -A
4. git commit -m <"mensaje">
5. git push origin master

COMANDOS AL TRABAJAR EN REPOSITORIOS DE EQUIPO
----------------------------------------------------------------------
 git fetch origin baja de repositorio remoto a la rama intermedia los cambios)
 git merge origin/master

COMANDOS GENERALES
----------------------------------------------------------------------
1. git status			(Estado del repositorio sincronizado)
2. git pull 	--rebase
3. git rebase 	--skip
4. git merge 	--abort


NOTAS GENERALES
----------------------------------------------------------------------
1)Fork: Crea una nueva versión del proyecto al que quiero colaborar dentro de github
2)Issues: son una forma de continuar, mejorar o solucionar un error en repositorio
3)Milestones: grupos de issues que aplican para un proyecto, caracteristica o periodo de tiempo.
4)Labels: organizar diferentes tipos de problemas
5)Tags anotadas: son puntos específicos marcados en un commit en la historia de nuestro proyecto y se usan para marcar alguna versión
6)Tags ligeras: otra forma de craer tags. son más simples y con poca información.
7)WorkFlow: flujos de trabajo como proyectos propios, proyectos en equipo y con terceros

----